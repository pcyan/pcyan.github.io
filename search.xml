<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[kotlin笔记：高阶函数的使用]]></title>
      <url>http://pcyan.github.io/2016/12/18/kotlin-note-higher-order-function/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学了3个星期的kotlin，并用它做了一个<a href="https://github.com/pcyan/Gantlin" target="_blank" rel="external">小项目</a>。<br>中间遇到了一些小问题，所以就想着写点东西来记录一下，方便日后自己查阅，也可以与他人分享<br>本篇讲的是kotlin中高阶函数的使用及技巧。<br><a id="more"></a></p>
<h1 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h1><p>在kotlin中，变量不仅仅可以是基本类型和引用类型，还可以是一个函数，函数可以被当作参数传递，<br>或者作为返回值被返回，这样的函数称为高阶函数。</p>
<h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><p>当我们使用 <code>Sqlite</code>做频繁的数据库操作的时候，有可能会用到事务，我们会需要去调用’beginTransaction()’，然后做数据库操作，成功之后调用’setTransactionSuccessful()’，最后还需要调用’endTransaction()’。<br>在kotlin中我们可以简化这个操作<br>定义函数接受开启事务后要做的操作，即一个函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fun excuteTransaction(transactionFun:()-&gt;Unit)&#123;</div><div class="line">    val db = dbHelper.writableDatabase</div><div class="line">    try&#123;</div><div class="line">        db.beginTransaction()</div><div class="line">        transactionFun()</div><div class="line">        db.setTransactionSuccessful()</div><div class="line">    &#125;finally &#123;</div><div class="line">        db.endTransaction()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后可以这样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">excuteTransaction &#123;</div><div class="line">    db.execSQL(...)</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是简单了很多</p>
<blockquote>
<p>注：在kotlin中，调用函数时，如果参数为函数并且是最后一个参数，可以将参数移到括号外面。移动到括号外面之后如果括号内没有参数，括号可以省略不写。所以最终写法如上。</p>
</blockquote>
<h1 id="使用扩展函数进一步简化"><a href="#使用扩展函数进一步简化" class="headerlink" title="使用扩展函数进一步简化"></a>使用扩展函数进一步简化</h1><p>扩展函数可以使得我们在不需要修改原来类的源代码的基础上，新增我们需要的api<br>以上面的代码为例，我们可以使它更加简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fun SQLiteDatabase.executeTransaction(transactionFun:SQLiteDatabase.()-&gt;Unit)&#123;</div><div class="line">    try&#123;</div><div class="line">        beginTransaction()</div><div class="line">        transactionFun()</div><div class="line">        setTransactionSuccessful()</div><div class="line">    &#125;finally &#123;</div><div class="line">        endTransaction()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义<code>executeTransaction()</code>为<code>SQLiteDatabase</code>的扩展函数并使得它接受一个<code>SQLiteDatabase</code>的扩展函数,<br>从而使得<code>executeTransaction()</code>以及参数中的函数<code>transactionFun()</code>可以使用<code>this</code>关键字调用<code>SQLiteDatabase</code>的api，进行数据库操作,使用方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">val db = dbHelper.writableDatabase</div><div class="line">db.executeTransaction &#123;</div><div class="line">    execSQL(...)</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是更加简洁明了了，奖励自己一朵小红花</p>
<h1 id="放弃麻烦的回调"><a href="#放弃麻烦的回调" class="headerlink" title="放弃麻烦的回调"></a>放弃麻烦的回调</h1><p>在Java中如果我们在做完一个操作之后希望能够得到响应并做一些后续的操作，那么我们就会定义一个回调函数<br>一般我们是这样定义的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface MyListener&#123;</div><div class="line">    void MyCallBack(String str)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在kotlin中你可以这样调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">obj.setMyListener(object:MyListener()&#123;</div><div class="line">    fun MyCallBack(str:String)&#123;</div><div class="line">	...</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>就像一般java中的调用一样<br>然而，kotlin支持像java8中的<code>SAM转换</code>(SAM conversion)，意思是当你的接口中之后一个方法的时候<br>你可以这样调用它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//方法二</div><div class="line">obj.setMyListener&#123;str-&gt;</div><div class="line">    println(str)</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当你只有一个参数，你甚至可以不写这个参数，使用<code>it</code>关键字进行引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//方法三</div><div class="line">obj.setMyListener&#123;</div><div class="line">    println(it)</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到这里，你可能会觉得那不是挺好的吗，标题说的是什么鬼<br>我一开始也觉的挺好的，但是当我使用kotlin去定义回调接口而不是使用java的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface MyListener&#123;</div><div class="line">    fun MyCallBack(str:String)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的接口只能使用<strong>方法一</strong>调用，不能使用方法二，或者三，原因是在kotlin中<br><code>SAM转换</code>只支持Java的代码，为什么呢？在我思考了<code>11.6667</code>秒之后，恍然大<del>雾</del>悟<br>kotlin根本就不需要这么麻烦的定义接口回调,你需要的只是一个函数做相应的后续操作，<br>所以你可以直接这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Test &#123;</div><div class="line"></div><div class="line">    private var myCallBack: ((str:String) -&gt; Unit)? = null</div><div class="line"></div><div class="line">    fun setMyListener(myCallBack: ((str:String) -&gt; Unit))&#123;</div><div class="line">        this.myCallBack = myCallBack</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里直接定义一个函数作为变量，作用跟回调一样，调用方法如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">val test = Test()</div><div class="line">test.setMyListener &#123;</div><div class="line">    println(it)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在使用kotlin的过程中，我有时候会用Java的思想去思考问题。所以有时候我们会需要去<code>review</code>代码，<br>不断的向自己提问题，“这块地方能不能做的更好?”，这样才能从中发现自己的不足并不断改善自己</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://kotlinlang.org/docs/reference/lambdas.html" target="_blank" rel="external">Higher-Order Functions and Lambdas</a><br><a href="http://tanfujun.com/kotlin-web-site-cn/docs/reference/lambdas.html" target="_blank" rel="external">高阶函数和lambda表达式</a><br><a href="http://kotlindoc.com/index.html" target="_blank" rel="external">号外 号外 Kotlin 1.0 正式发布</a><br><a href="https://github.com/wangjiegulu/kotlin-for-android-developers-zh" target="_blank" rel="external">《Kotlin for android developers》中文版翻译</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 使用 Hexo + Github Pages 搭建静态博客]]></title>
      <url>http://pcyan.github.io/2016/09/07/hexo-github-page/</url>
      <content type="html"><![CDATA[<p>本文中使用的 <code>Linux</code> 发行版为 <code>Ubuntu 16.04</code><br>以下内容假设你是一个对 <code>github</code> 有所了解并且有使用过 <code>git</code> 的人<br>如果你还是想继续阅读，请利用好你的<a href="http://google.com" target="_blank" rel="external">搜索引擎</a>做相应的准备<br><a id="more"></a></p>
<h2 id="About-Github-Pages"><a href="#About-Github-Pages" class="headerlink" title="About Github Pages"></a>About Github Pages</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a> 是 <code>github</code> 的一种特殊的仓库，可以用来展示你的个人信息或者你的项目，不过当然，你可以用它做其他更好玩的事情。</p>
<p>创建并使用 <code>Github Pages</code> 的方法很简单，你可以直接看<a href="https://pages.github.com/" target="_blank" rel="external">官方的教程</a>，或者看我的<del>废话</del>简短教程</p>
<ol>
<li>创建一个名为 <code>your_username.github.io</code> 的仓库（your_username表示你的Github用户名）</li>
<li>部署静态页面例如 <code>index.html</code> 到刚才创建的仓库</li>
<li>通过 <code>http://github.com/your_username/your_username.github.io/index.html</code> 来访问刚才创建的页面</li>
</ol>
<p>至此你已经可以成功的使用 <code>Github Pages</code> 玩耍了<br>更加高级的用法是你可以购买一个域名，然后将域名与 <code>Github Pages</code> 绑定在一起<br>这样就可以直接使用你自己的域名来访问了<br>这里没有讲的原因是我没钱买域名（捂脸），所以如果你感兴趣的话可以移步官方教程。</p>
<h2 id="About-Hexo"><a href="#About-Hexo" class="headerlink" title="About Hexo"></a>About Hexo</h2><p>那么问题来了，我创建一个博客，总不能自己去维护页面的样式主题吧，这样一点都不软件工程啊。<br>所以接下来就是我们的正餐 – <code>Hexo</code></p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>是一个跨平台的，可供用户快速配置博客样式并且管理博客的工具<br>你可以使用别人分享的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a>加上上文提及的 <code>Github Pages</code>  快速搭建你的个人静态博客。</p>
<h2 id="How-to-use-Hexo"><a href="#How-to-use-Hexo" class="headerlink" title="How to use Hexo"></a>How to use Hexo</h2><p>下面讲一下如何在 <code>Linux</code> 配置并使用 <code>Hexo</code></p>
<h3 id="安装-NodeJs"><a href="#安装-NodeJs" class="headerlink" title="安装 NodeJs"></a>安装 NodeJs</h3><p><a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="external">官方教程</a><br>稳定版v4.x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -</div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure></p>
<p>最新版本v6.x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure></p>
<p>可选：安装构建工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y build-essential</div></pre></td></tr></table></figure></p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cd workspace/</div><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init //初始化环境</div><div class="line">$ cd Hexo</div><div class="line">$ npm install //安装依赖</div><div class="line">$ hexo clean</div><div class="line">$ hexo g //生成文件</div><div class="line">$ hexo s //启动预览</div></pre></td></tr></table></figure>
<p>输入 <code>hexo s</code> 后会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>
<p>在浏览器输入 <code>http://localhost:4000/</code> 便可以预览博客了</p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>初始化完 <code>Hexo</code> 使用的是默认的主题，如果不喜欢的话可以上<code>github</code> 或者 <code>Hexo</code> 搜一下自己喜欢的主题<br>这里提供我使用的主题，<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a></p>
<p>下载主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd workspace/Hexo</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>配置<code>NexT</code><br>修改 <code>workspace/Hexo/_config.yml</code> 的 <code>theme</code>字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里注意，<code>Hexo</code> 的配置文件，冒号后面一定要有空格</p>
</blockquote>
<p>保存配置之后便可以使用 <code>hexo s</code> 来预览主题了<br>关于主题的详细配置，<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官方网站</a>讲的比我详细，我就不吹了</p>
<h2 id="将-Hexo-部署到-Github"><a href="#将-Hexo-部署到-Github" class="headerlink" title="将 Hexo 部署到 Github"></a>将 Hexo 部署到 Github</h2><h3 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a>生成 SSH 密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div><div class="line"># Creates a new ssh key using the provided email</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/home/username/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</div><div class="line">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure>
<p>如果不为密钥配置密码可以直接 <code>Enter</code> 过</p>
<h3 id="Github添加公钥"><a href="#Github添加公钥" class="headerlink" title="Github添加公钥"></a>Github添加公钥</h3><p>复制 <code>~/.ssh/id_rsa.pub</code>的内容，进入你的 <code>Github</code><br>选择<code>Settings –&gt; Deploy keys –&gt; Add deploy key</code>，添加公钥</p>
<p>测试配置是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果出现以下内容即表示配置完成并且成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<h3 id="安装-Git-扩展"><a href="#安装-Git-扩展" class="headerlink" title="安装 Git 扩展"></a>安装 Git 扩展</h3><p>这里注意<code>Hexo</code> 需要安装扩展才能使用 <code>Git</code> 部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<h3 id="Git部署配置"><a href="#Git部署配置" class="headerlink" title="Git部署配置"></a>Git部署配置</h3><p>编辑 <code>workspace/Hexo/_config.yml</code>,修改 <code>deploy</code> 字段下的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里 <code>repo</code> 填的是你的 <code>Github Pages</code> 的地址，注意是 <code>SSH</code> 地址，不是 <code>HTTPS</code></p>
</blockquote>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g -d //组合命令，生成文件后部署</div></pre></td></tr></table></figure>
<p>部署完毕再次进入 <code>Github Pages</code> 就可以看到效果了<br>有时候部署完会有点延时，等几秒钟再刷新就可以看到效果了</p>
<h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>Enjoy it !!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[替代Gradle的构建工具--Freeline]]></title>
      <url>http://pcyan.github.io/2016/09/04/use_freeline_instead_of_gradle/</url>
      <content type="html"><![CDATA[<p>废话不多说，先奉上 <a href="https://github.com/alibaba/freeline" target="_blank" rel="external">Freeline Github主页</a><br><code>Freeline</code> 是阿里的一个团队开发的 <code>Android</code> 项目构建工具。使用 <code>Freeline</code> 的话，<br>在经过全量编译（第一次全新的编译）后，之后的每次编译都可以通过增量编译，只提交更改部分的内容，所以编译速度非常快。<br><a id="more"></a></p>
<h2 id="实战体验"><a href="#实战体验" class="headerlink" title="实战体验"></a>实战体验</h2><p>这里对于 <code>Feeline</code> 的具体用法我就不说了，项目主页已经说的很详细了。<br>实际体验过后我发现，在开启了 <code>MultiDex</code> 的项目中，<code>Freeline</code> 的速度也是要比 <code>Gradle</code> 快一倍的。<br>拿我们公司的项目来说(具体什么项目就不表了)，我是没有固态硬盘，<code>win7</code>的环境，项目是开启了 <code>MultiDex</code>，module 有5+ 。<br>编译速度如下</p>
<table>
<thead>
<tr>
<th style="text-align:left">/</th>
<th style="text-align:left">Gradle</th>
<th style="text-align:left">Freeline</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">全量编译(max)</td>
<td style="text-align:left">4min+</td>
<td style="text-align:left">100s+</td>
</tr>
<tr>
<td style="text-align:left">全量编译(min)</td>
<td style="text-align:left">3min+</td>
<td style="text-align:left">70s+</td>
</tr>
<tr>
<td style="text-align:left">增量编译/InstantRun</td>
<td style="text-align:left">&gt; 10s</td>
<td style="text-align:left">&lt; 5s</td>
</tr>
</tbody>
</table>
<p>关于 <code>Gradle</code> 的构建速度有点记不清了，反正是开了 <code>InstnatRun</code> 之后也没有感觉快很多.<br>而且 <code>Freeline</code> 与 <code>InstantRun</code> 相比，在 <code>Freeline</code> 下修改 <code>Java</code> 文件或者资源，都是可以增量并且都是在 5s 内的。<br><code>Gradle</code> 的话修改资源可以跑 <code>InstnatRun</code>，但是一旦修改了资源文件，又需要重新构建，也就是全量编译，又需要花费大量的时间。<br>所以这段时间体验下来，<code>Freeline</code> 确实帮我节省了很多时间，可以更加专注的开（tou）发（lan）。</p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>下面贴一下我的 <code>Freeline</code> 在 <code>Gradle</code> 的配置，如果你也想用 <code>Freeline</code> 的话，这可能对你有帮助</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line">apply plugin: &apos;com.antfortune.freeline&apos;</div><div class="line">android &#123;</div><div class="line">    freeline &#123;</div><div class="line">        hack true</div><div class="line">        productFlavor &apos;dev&apos;</div><div class="line">        apkPath project.rootProject.file(&quot;D:\\workspace\\my_project\\app\\build\\outputs\\apk&quot;).getAbsolutePath()+&apos;\\app-dev-debug-&apos;+parent.ext.versionName+&apos;.apk&apos;</div><div class="line">        #如果是Linux可以使用相对路径，win没试过相对路径</div><div class="line">        #apkPath project.rootProject.file(&quot;app/build/outputs/apk&quot;).getAbsolutePath()+&apos;/app-dev-debug-&apos;+parent.ext.versionName+&apos;.apk&apos;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    productFlavors &#123;</div><div class="line">        //instant run</div><div class="line">        dev&#123;</div><div class="line">            minSdkVersion  21</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ...</div><div class="line">        productFlavors.all &#123; flavor -&gt;</div><div class="line">            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">            flavor.minSdkVersion 14</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //apk添加版本号</div><div class="line">    android.applicationVariants.all &#123; variant -&gt;</div><div class="line">        def file = variant.outputs[0].outputFile</div><div class="line">        variant.outputs[0].outputFile = new File(file.parent, file.name.replace(&quot;.apk&quot;, &quot;-&quot; + defaultConfig.versionName + &quot;.apk&quot;))</div><div class="line">    &#125;</div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            jniLibs.srcDirs = [&apos;libs&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    compile &apos;com.antfortune.freeline:runtime:0.5.4&apos;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>Freeline</code> 开源出来还不久，所以还不能完全的符合日常的开发需求。<br>如果你有任何的问题，可以到 <a href="https://github.com/alibaba/freeline" target="_blank" rel="external">项目主页</a> 提 issue。</p>
<p>最后的最后，能够当一名开发者，了解到这么有趣的东西，真的是太好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://pcyan.github.io/2016/09/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
